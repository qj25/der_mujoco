# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Der_iso', [dirname(__file__)])
        except ImportError:
            import _Der_iso
            return _Der_iso
        if fp is not None:
            try:
                _mod = imp.load_module('_Der_iso', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Der_iso = swig_import_helper()
    del swig_import_helper
else:
    import _Der_iso
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class DER_iso(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DER_iso, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DER_iso, name)
    __repr__ = _swig_repr

    def __init__(self, dim_np, dim_bf0, theta_n, overall_rot, a_bar, b_bar):
        this = _Der_iso.new_DER_iso(dim_np, dim_bf0, theta_n, overall_rot, a_bar, b_bar)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["nodes"] = _Der_iso.DER_iso_nodes_set
    __swig_getmethods__["nodes"] = _Der_iso.DER_iso_nodes_get
    if _newclass:
        nodes = _swig_property(_Der_iso.DER_iso_nodes_get, _Der_iso.DER_iso_nodes_set)
    __swig_setmethods__["overall_rot"] = _Der_iso.DER_iso_overall_rot_set
    __swig_getmethods__["overall_rot"] = _Der_iso.DER_iso_overall_rot_get
    if _newclass:
        overall_rot = _swig_property(_Der_iso.DER_iso_overall_rot_get, _Der_iso.DER_iso_overall_rot_set)
    __swig_setmethods__["d_vec"] = _Der_iso.DER_iso_d_vec_set
    __swig_getmethods__["d_vec"] = _Der_iso.DER_iso_d_vec_get
    if _newclass:
        d_vec = _swig_property(_Der_iso.DER_iso_d_vec_get, _Der_iso.DER_iso_d_vec_set)
    __swig_setmethods__["nv"] = _Der_iso.DER_iso_nv_set
    __swig_getmethods__["nv"] = _Der_iso.DER_iso_nv_get
    if _newclass:
        nv = _swig_property(_Der_iso.DER_iso_nv_get, _Der_iso.DER_iso_nv_set)
    __swig_setmethods__["edges"] = _Der_iso.DER_iso_edges_set
    __swig_getmethods__["edges"] = _Der_iso.DER_iso_edges_get
    if _newclass:
        edges = _swig_property(_Der_iso.DER_iso_edges_get, _Der_iso.DER_iso_edges_set)
    __swig_setmethods__["bigL_bar"] = _Der_iso.DER_iso_bigL_bar_set
    __swig_getmethods__["bigL_bar"] = _Der_iso.DER_iso_bigL_bar_get
    if _newclass:
        bigL_bar = _swig_property(_Der_iso.DER_iso_bigL_bar_get, _Der_iso.DER_iso_bigL_bar_set)
    __swig_setmethods__["bf0_bar"] = _Der_iso.DER_iso_bf0_bar_set
    __swig_getmethods__["bf0_bar"] = _Der_iso.DER_iso_bf0_bar_get
    if _newclass:
        bf0_bar = _swig_property(_Der_iso.DER_iso_bf0_bar_get, _Der_iso.DER_iso_bf0_bar_set)
    __swig_setmethods__["alpha_bar"] = _Der_iso.DER_iso_alpha_bar_set
    __swig_getmethods__["alpha_bar"] = _Der_iso.DER_iso_alpha_bar_get
    if _newclass:
        alpha_bar = _swig_property(_Der_iso.DER_iso_alpha_bar_get, _Der_iso.DER_iso_alpha_bar_set)
    __swig_setmethods__["beta_bar"] = _Der_iso.DER_iso_beta_bar_set
    __swig_getmethods__["beta_bar"] = _Der_iso.DER_iso_beta_bar_get
    if _newclass:
        beta_bar = _swig_property(_Der_iso.DER_iso_beta_bar_get, _Der_iso.DER_iso_beta_bar_set)
    __swig_setmethods__["j_rot"] = _Der_iso.DER_iso_j_rot_set
    __swig_getmethods__["j_rot"] = _Der_iso.DER_iso_j_rot_get
    if _newclass:
        j_rot = _swig_property(_Der_iso.DER_iso_j_rot_get, _Der_iso.DER_iso_j_rot_set)
    __swig_setmethods__["p_thetan"] = _Der_iso.DER_iso_p_thetan_set
    __swig_getmethods__["p_thetan"] = _Der_iso.DER_iso_p_thetan_get
    if _newclass:
        p_thetan = _swig_property(_Der_iso.DER_iso_p_thetan_get, _Der_iso.DER_iso_p_thetan_set)
    __swig_setmethods__["bf0mat"] = _Der_iso.DER_iso_bf0mat_set
    __swig_getmethods__["bf0mat"] = _Der_iso.DER_iso_bf0mat_get
    if _newclass:
        bf0mat = _swig_property(_Der_iso.DER_iso_bf0mat_get, _Der_iso.DER_iso_bf0mat_set)

    def updateVars(self, dim_np, dim_bf0, dim_bfe):
        return _Der_iso.DER_iso_updateVars(self, dim_np, dim_bf0, dim_bfe)

    def calculateCenterlineF2(self, dim_nf):
        return _Der_iso.DER_iso_calculateCenterlineF2(self, dim_nf)

    def updateTheta(self, theta_n):
        return _Der_iso.DER_iso_updateTheta(self, theta_n)

    def resetTheta(self, theta_n, overall_rot):
        return _Der_iso.DER_iso_resetTheta(self, theta_n, overall_rot)
    __swig_destroy__ = _Der_iso.delete_DER_iso
    __del__ = lambda self: None
DER_iso_swigregister = _Der_iso.DER_iso_swigregister
DER_iso_swigregister(DER_iso)

# This file is compatible with both classic and new-style classes.


