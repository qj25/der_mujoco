# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _der_iso_cpp
else:
    import _der_iso_cpp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class DER_iso(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim_np, dim_bf0, theta_n, overall_rot):
        _der_iso_cpp.DER_iso_swiginit(self, _der_iso_cpp.new_DER_iso(dim_np, dim_bf0, theta_n, overall_rot))
    nodes = property(_der_iso_cpp.DER_iso_nodes_get, _der_iso_cpp.DER_iso_nodes_set)
    overall_rot = property(_der_iso_cpp.DER_iso_overall_rot_get, _der_iso_cpp.DER_iso_overall_rot_set)
    d_vec = property(_der_iso_cpp.DER_iso_d_vec_get, _der_iso_cpp.DER_iso_d_vec_set)
    nv = property(_der_iso_cpp.DER_iso_nv_get, _der_iso_cpp.DER_iso_nv_set)
    edges = property(_der_iso_cpp.DER_iso_edges_get, _der_iso_cpp.DER_iso_edges_set)
    bigL_bar = property(_der_iso_cpp.DER_iso_bigL_bar_get, _der_iso_cpp.DER_iso_bigL_bar_set)
    bf0_bar = property(_der_iso_cpp.DER_iso_bf0_bar_get, _der_iso_cpp.DER_iso_bf0_bar_set)
    alpha_bar = property(_der_iso_cpp.DER_iso_alpha_bar_get, _der_iso_cpp.DER_iso_alpha_bar_set)
    beta_bar = property(_der_iso_cpp.DER_iso_beta_bar_get, _der_iso_cpp.DER_iso_beta_bar_set)
    j_rot = property(_der_iso_cpp.DER_iso_j_rot_get, _der_iso_cpp.DER_iso_j_rot_set)
    p_thetan = property(_der_iso_cpp.DER_iso_p_thetan_get, _der_iso_cpp.DER_iso_p_thetan_set)
    bf0mat = property(_der_iso_cpp.DER_iso_bf0mat_get, _der_iso_cpp.DER_iso_bf0mat_set)

    def updateVars(self, dim_np, dim_bf0):
        return _der_iso_cpp.DER_iso_updateVars(self, dim_np, dim_bf0)

    def calculateCenterlineF2(self, dim_nf):
        return _der_iso_cpp.DER_iso_calculateCenterlineF2(self, dim_nf)
    __swig_destroy__ = _der_iso_cpp.delete_DER_iso

# Register DER_iso in _der_iso_cpp:
_der_iso_cpp.DER_iso_swigregister(DER_iso)



